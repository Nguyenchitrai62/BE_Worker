import pandas as pd
import numpy as np

def analyze_signal_quality(csv_file='data.csv', window_size=12, min_change=0.5, ratio_threshold=3):
    """
    Ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng t√≠n hi·ªáu t·ª´ file CSV
    
    Parameters:
    csv_file (str): ƒê∆∞·ªùng d·∫´n file CSV
    window_size (int): K√≠ch th∆∞·ªõc c·ª≠a s·ªï ƒë·ªÉ t√≠nh future_high/low
    min_change (float): % thay ƒë·ªïi t·ªëi thi·ªÉu ƒë·ªÉ coi l√† t√≠n hi·ªáu m·∫°nh
    ratio_threshold (float): T·ªâ l·ªá gain/loss t·ªëi thi·ªÉu ƒë·ªÉ coi l√† t√≠n hi·ªáu r√µ r√†ng
    """
    # Load d·ªØ li·ªáu
    data = pd.read_csv(csv_file, parse_dates=['Date'])
    print(f"ƒê√£ load {len(data)} d√≤ng d·ªØ li·ªáu t·ª´ {csv_file}")
    
    # T√≠nh future_high v√† future_low gi·ªëng nh∆∞ c√¥ng th·ª©c ƒë√£ cho
    data['future_high'] = data['High'].shift(-1).rolling(window=window_size, min_periods=window_size).max().shift(-window_size + 1)
    data['future_low'] = data['Low'].shift(-1).rolling(window=window_size, min_periods=window_size).min().shift(-window_size + 1)
    
    # T√≠nh % thay ƒë·ªïi gi√°
    data['max_gain_pct'] = ((data['future_high'] - data['Close']) / data['Close'] * 100).round(2)
    data['max_loss_pct'] = ((data['Close'] - data['future_low']) / data['Close'] * 100).round(2)
    
    # H√†m g√°n nh√£n - Ch·ªâ t√≠nh to√°n khi signal kh√°c -1
    def label_comprehensive(row):
        # Ch·ªâ t√≠nh quality_label khi c√≥ signal th·ª±c s·ª± (signal != -1)
        if row['signal'] == -1:
            return None  # Kh√¥ng c√≥ t√≠n hi·ªáu, kh√¥ng c·∫ßn ƒë√°nh gi√°
        
        # T√≠nh to√°n quality_label cho c√°c ƒëi·ªÉm c√≥ t√≠n hi·ªáu
        if (row['max_gain_pct'] >= min_change and 
            row['max_gain_pct'] / max(row['max_loss_pct'], 0.1) >= ratio_threshold):
            return 1  # TƒÉng r√µ r√†ng
        elif (row['max_loss_pct'] >= min_change and 
              row['max_loss_pct'] / max(row['max_gain_pct'], 0.1) >= ratio_threshold):
            return 0  # Gi·∫£m r√µ r√†ng
        else:
            return -1  # Kh√¥ng r√µ r√†ng
    
    # √Åp d·ª•ng h√†m g√°n nh√£n
    data['quality_label'] = data.apply(label_comprehensive, axis=1)
    
    # Ph√¢n t√≠ch t√≠n hi·ªáu
    def analyze_signals():
        # L·ªçc c√°c ƒëi·ªÉm c√≥ t√≠n hi·ªáu
        buy_signals = data[data['signal'] == 1].copy()
        sell_signals = data[data['signal'] == 0].copy()
        
        print("\n" + "="*60)
        print("PH√ÇN T√çCH CH·∫§T L∆Ø·ª¢NG T√çN HI·ªÜU")
        print(f"Tham s·ªë: min_change={min_change}%, ratio_threshold={ratio_threshold}")
        print("="*60)
        
        # Ph√¢n t√≠ch t√≠n hi·ªáu mua (signal = 1)
        if len(buy_signals) > 0:
            print(f"\nüìà T√çN HI·ªÜU MUA (Signal = 1): {len(buy_signals)} ƒëi·ªÉm")
            
            # ƒê·∫øm c√°c lo·∫°i k·∫øt qu·∫£
            strong_up = len(buy_signals[buy_signals['quality_label'] == 1])
            strong_down = len(buy_signals[buy_signals['quality_label'] == 0])
            unclear = len(buy_signals[buy_signals['quality_label'] == -1])
            valid_signals = len(buy_signals[buy_signals['quality_label'].notna()])
            
            print(f"  ‚úÖ TƒÉng m·∫°nh th·ª±c s·ª±: {strong_up}/{valid_signals} ({strong_up/valid_signals*100:.1f}%)")
            print(f"  ‚ùå Gi·∫£m m·∫°nh (sai): {strong_down}/{valid_signals} ({strong_down/valid_signals*100:.1f}%)")
            print(f"  ‚ö™ Kh√¥ng r√µ r√†ng: {unclear}/{valid_signals} ({unclear/valid_signals*100:.1f}%)")
            
            # Th·ªëng k√™ chi ti·∫øt
            avg_gain = buy_signals['max_gain_pct'].mean()
            avg_loss = buy_signals['max_loss_pct'].mean()
            print(f"  üìä Avg Max Gain: {avg_gain:.2f}%")
            print(f"  üìä Avg Max Loss: {avg_loss:.2f}%")
            
        # Ph√¢n t√≠ch t√≠n hi·ªáu b√°n (signal = 0)
        if len(sell_signals) > 0:
            print(f"\nüìâ T√çN HI·ªÜU B√ÅN (Signal = 0): {len(sell_signals)} ƒëi·ªÉm")
            
            # ƒê·∫øm c√°c lo·∫°i k·∫øt qu·∫£
            strong_down = len(sell_signals[sell_signals['quality_label'] == 0])
            strong_up = len(sell_signals[sell_signals['quality_label'] == 1])
            unclear = len(sell_signals[sell_signals['quality_label'] == -1])
            valid_signals = len(sell_signals[sell_signals['quality_label'].notna()])
            
            print(f"  ‚úÖ Gi·∫£m m·∫°nh th·ª±c s·ª±: {strong_down}/{valid_signals} ({strong_down/valid_signals*100:.1f}%)")
            print(f"  ‚ùå TƒÉng m·∫°nh (sai): {strong_up}/{valid_signals} ({strong_up/valid_signals*100:.1f}%)")
            print(f"  ‚ö™ Kh√¥ng r√µ r√†ng: {unclear}/{valid_signals} ({unclear/valid_signals*100:.1f}%)")
            
            # Th·ªëng k√™ chi ti·∫øt
            avg_gain = sell_signals['max_gain_pct'].mean()
            avg_loss = sell_signals['max_loss_pct'].mean()
            print(f"  üìä Avg Max Gain: {avg_gain:.2f}%")
            print(f"  üìä Avg Max Loss: {avg_loss:.2f}%")
        
        return buy_signals, sell_signals
    
    # Ch·∫°y ph√¢n t√≠ch
    buy_signals, sell_signals = analyze_signals()
    
    # T·∫°o b·∫£ng t√≥m t·∫Øt
    def create_summary_table():
        print(f"\n" + "="*60)
        print("B·∫¢NG T√ìM T·∫ÆT CH·∫§T L∆Ø·ª¢NG T√çN HI·ªÜU")
        print("="*60)
        
        summary_data = []
        
        # T√≠n hi·ªáu mua
        if len(buy_signals) > 0:
            valid_buy = buy_signals[buy_signals['quality_label'].notna()]
            buy_accuracy = len(valid_buy[valid_buy['quality_label'] == 1]) / len(valid_buy) * 100 if len(valid_buy) > 0 else 0
            summary_data.append({
                'Signal Type': 'BUY (Signal=1)',
                'Total Signals': len(buy_signals),
                'Strong Move Correct': len(buy_signals[buy_signals['quality_label'] == 1]),
                'Strong Move Wrong': len(buy_signals[buy_signals['quality_label'] == 0]),
                'Unclear': len(buy_signals[buy_signals['quality_label'] == -1]),
                'Accuracy (%)': f"{buy_accuracy:.1f}%"
            })
        
        # T√≠n hi·ªáu b√°n
        if len(sell_signals) > 0:
            valid_sell = sell_signals[sell_signals['quality_label'].notna()]
            sell_accuracy = len(valid_sell[valid_sell['quality_label'] == 0]) / len(valid_sell) * 100 if len(valid_sell) > 0 else 0
            summary_data.append({
                'Signal Type': 'SELL (Signal=0)',
                'Total Signals': len(sell_signals),
                'Strong Move Correct': len(sell_signals[sell_signals['quality_label'] == 0]),
                'Strong Move Wrong': len(sell_signals[sell_signals['quality_label'] == 1]),
                'Unclear': len(sell_signals[sell_signals['quality_label'] == -1]),
                'Accuracy (%)': f"{sell_accuracy:.1f}%"
            })
        
        if summary_data:
            summary_df = pd.DataFrame(summary_data)
            print(summary_df.to_string(index=False))
    
    create_summary_table()
    
    # L∆∞u k·∫øt qu·∫£
    output_file = 'data.csv'
    data.to_csv(output_file, index=False)
    print(f"\nüíæ ƒê√£ l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o file: {output_file}")
    
    # Tr·∫£ v·ªÅ DataFrame ƒë·ªÉ s·ª≠ d·ª•ng ti·∫øp
    return data, buy_signals, sell_signals

# V√≠ d·ª• s·ª≠ d·ª•ng v·ªõi c√°c tham s·ªë kh√°c nhau
if __name__ == "__main__":
    # S·ª≠ d·ª•ng tham s·ªë m·∫∑c ƒë·ªãnh
    print("PH√ÇN T√çCH V·ªöI THAM S·ªê M·∫∂C ƒê·ªäNH:")
    data1, buy1, sell1 = analyze_signal_quality('data.csv', window_size=20, min_change=1, ratio_threshold=1)
    